// Pertemuan 2 (Algoritma).cpp : This file contains the 'main' function. Program execution begins and ends there.
// Ucp algoritma

#include <iostream>
using namespace std;
int arr[9];
int n;

void input() {
    while (true) {
        cout << "Masukkan banyaknya elemen pada array : ";
        cin >> n;
        if (n <= 02)
            break;
        else {
            cout << "\nArray dapat mempunyai maksimal 08 elemen.\n";
        }
    }
    cout << endl;
    cout << "======================" << endl;
    cout << "Masukkan Elemen Array" << endl;
    cout << "======================" << endl;
    cout << "<< Sandy Ardiyan [i] <<";

    for (int i = 0; i < n; i++) {
        cout << "Data ke-" << (i + 1) << ": ";
        cin >> arr[i];
    }

}

void insertionsort() {
    int i, temp, j;

    for (i = 1; i <= n - 1; i++) { //step 1

        temp = arr[i]; //step 2

        j = i - 1; //step 3

        while (j >= 0 && arr[j] > temp) //step 4
        {
            arr[j + 1] = arr[j]; //step 4a
            j--; //step 4b
        }
        arr[j + 1] = temp; //step 5
    }
}

void display() {
    cout << endl;
    cout << "=====================================" << endl;
    cout << "Element Array yang telah tersusun" << endl;
    cout << "=====================================" << endl;
    cout << endl;
    for (int j = 0; j < n; j++) {
        cout << arr[j];
        if (j < n - 1) {
            cout << " --> ";
        }
    }
    cout << endl;
    cout << endl;
    cout << "Jumlah pass = " << n - 1 << endl;
    cout << endl;

}
int main() {

    input();
    insertionsort();
    display();
    system("pause");

    return 0;
}

 // 1.	Buble short 
// - Pasang  pass = 1 (sampai n - 1 0)
// - Ulangi  Langkah 3 untuk J mulai dari sampai pass n - 1 - pass
// - Jika elemen index J lebih besar dari pada index J + 1 , tukar kedua elemen
// - kenaikan pass dari 1
// - Jika pass <=n -1 ,ke step 2

//2. Selection Short
// - Orde kuadratiic > 0 (n2)
// - Cocok untuk data kecil
// - Mencari paling kecil pertama menuju paling kecil terakhir
// - Melakukan scanning secara berulang, di pilih suatu item di dalam satu scan ( yang paling kecil )
  
//3. Algoritma Sortir
//  Urut secaara logika : 4 2 1 3 atau mahasiswa sekelas yg duduk tidak sesuai nim di kelas
